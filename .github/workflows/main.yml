name: Pipeline

on:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUSTDOCFLAGS: "-Dwarnings"

jobs:
  full_pipeline:
    name: Full Pipeline
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup dtolnay/rust-toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      # load project cache to reduce compilation time
      - name: Setup project cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: release-${{ runner.os }}-cargo-

      - name: Set environment variables
        run: |
          echo "PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0] | [ .name ] | join("")')" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0] | [ .version ] | join("")')" >> $GITHUB_ENV

      - name: Update dependencies
        run: cargo update
      - name: Build
        run: cargo build --release
      - name: Generate docs
        run: cargo doc
      - name: Run doc tests # Unit tests are run by tarpaulin
        run: cargo test --doc --verbose

      - name: Install cargo-tarpaulin
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-tarpaulin
      - name: Calculate test coverage
        run: cargo tarpaulin --out Html
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-code_coverage_report-v${{ env.PROJECT_VERSION }}
          path: tarpaulin-report.html

      # Lints: Clippy and Fmt
      - name: Clippy
        run: cargo clippy -- -D warnings
      - name: Format
        run: cargo fmt --all -- --check

      # Cargo check for security issues
      - name: Install cargo-audit
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-audit
      - name: Security audit
        run: cargo audit

      # Check for outdated dependencies
      - name: Install cargo-outdated
        uses: dtolnay/install@cargo-outdated
      - name: Outdated dependencies
        run: cargo outdated --root-deps-only --exit-code 1

      - name: Archive release build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.PROJECT_NAME }}-release_build-v${{ env.PROJECT_VERSION }}
          path: target/release/${{ env.PROJECT_NAME }}
